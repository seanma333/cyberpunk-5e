{"name": "Tool Check", "type": "script", "author": "kP09MjF5zDygPc2j", "img": "modules/game-icons-net/whitetransparent/tinker.svg", "scope": "global", "command": "const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\n\nasync function getToolNames(game, toolIds) {\n  let itemPack = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS);\n  let vehicles = CONFIG.DND5E.vehicleTypes;\n\n  let names = []\n  for (const [key, id] of Object.entries(toolIds)) {\n    if (vehicles[id]) {\n      names.push(vehicles[id]);\n      continue;\n    }\n    let itemId = CONFIG.DND5E.toolIds[id];\n    const itemDoc = await itemPack.getDocument(itemId);\n    if (itemDoc) {\n      names.push(itemDoc.name);\n    }\n  }\n  return names\n}\n\nasync function rollToolButton(html, adv, token) {\n  let selectedAbility = html.find(\"[id=ability]\")[0].value;\n  let expertise = html.find(\"[name=expertise]\")[0].checked;\n  let tool = html.find(\"[id=tools]\")[0].value;\n  switch(adv) {\n    case 'adv':\n      diceRoll = \"2d20kh1\";\n      break;\n    case 'disadv':\n      diceRoll = \"2d20kl1\";\n      break;\n    default:\n      diceRoll = \"1d20\";\n      break;\n  }\n  if (tool) {\n    rollToolCheck(token.actor, tool.replaceAll('-',' '), diceRoll, selectedAbility, expertise)\n  }\n}\n\nasync function rollToolCheck(actor, tool, diceRoll, ability, expertise) {\n  let actorData = actor.data.data\n  let mod = actorData.abilities[ability].mod;\n\n  let proficiency = expertise ? actorData.prof * 2 : actorData.prof;\n\n  let roll = await new Roll(`${diceRoll}+${proficiency}+${mod}`).roll();\n\n  // Imitate dice tooltip\n  console.log(roll.dice[0])\n  let result = 0;\n  let diceRollParts = roll.dice[0].results.map(d => {\n    if (d.active) {\n      result = d.result;\n    }\n    let maxmin = \"\"\n    if (d.result === 20) {\n      maxmin = \"max\"\n    } else if (d.result === 1) {\n      maxmin = \"min\"\n    }\n    return `<li class=\"roll die d20 ${d.discarded ? 'discarded': ''} ${maxmin}\">${d.result}</li>`\n  }).reduce((r, li) => r.concat(li), '')\n\n  let critfumble = \"\"\n  if (result === 20) {\n    critfumble = \"critical\";\n  } else if (result === 1) {\n    critfumble = \"fumble\";\n  }\n\n\n  let contentHtml = `\n    <header class=\"card-header flexrow\"><h3>${tool} [${ability.toUpperCase()}]${expertise ? ' (expertise)' : ''}</h3></header>\n    <div class=\"card-buttons\">\n      <div class=\"flexrow 1\">\n        <div class=\"dice-roll\">\n          <div class=\"dice-result\">\n            <div class=\"dice-formula\">${roll.formula}</div>\n            <div class=\"dice-tooltip\" style=\"display: none\">\n              <section class=\"tooltip-part\">\n                <div class=\"dice\">\n                  <ol class=\"dice-rolls\">${diceRollParts}</ol>\n                </div>\n              </section>\n            </div>\n            <h4 class=\"dice-total ${critfumble}\">${roll.total}</div>\n          </div>\n        </div>\n      </div>\n    </div>`\n\n  ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: actor}),\n    content: contentHtml\n  })\n}\n\nvar toolProf = token.actor.data.data.traits.toolProf;\nlet tools = await getToolNames(game, toolProf.value);\n\nif (toolProf.custom) {\n  tools = tools.concat(toolProf.custom.split(';'));\n}\n\nlet abilityScoreSelector = `\n<div>\n  <label>Select ability score:</label>\n  <select id=\"ability\" name=\"ability\">\n    <option value=\"str\">Strength</option>\n    <option value=\"dex\">Dexterity</option>\n    <option value=\"con\">Constitution</option>\n    <option value=\"int\" selected>Intelligence</option>\n    <option value=\"wis\">Wisdom</option>\n    <option value=\"cha\">Charisma</option>\n  </select>\n</div>\n`\n\nlet toolOptions = tools.map(tool => \n  `<option value=${tool.replaceAll(' ','-')}>${tool}</option>`\n).reduce((r,opt) => r.concat(opt), '<option disabled value selected />')\n\nlet toolSelector = `\n<div>\n<label>Select tool:</label>\n<select id=\"tools\" name=\"tools\">${toolOptions}</select>\n</div>`\n\nlet expertiseSelector = `\n<div><label>Expertise?</label><input name=\"expertise\" type=\"checkbox\"/></div>\n`\n\nlet dialogHtml = abilityScoreSelector.concat(toolSelector.concat(expertiseSelector))\n\n\nlet d = new Dialog({\n  title: \"Tool Check\",\n  content: dialogHtml,\n  buttons: {\n    advantage: {\n      label: \"Advantage\",\n      callback: (html) => rollToolButton(html, \"adv\", token)\n    },\n    normal: {\n      label: \"Normal\",\n      callback: (html) => rollToolButton(html, \"norm\", token)\n    },\n    disadvantage: {\n      label: \"Disadvantage\",\n      callback: (html) => rollToolButton(html, \"disadv\", token)\n    },\n  }\n})\nd.render(true)", "folder": null, "sort": 0, "_id": "k1ZGIP8pHADgA7iV", "flags": {}, "permission": {"default": 0, "kP09MjF5zDygPc2j": 3}}
