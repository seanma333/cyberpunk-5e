{"name": "Reload", "type": "script", "scope": "global", "author": "35XmDJHnBMPCEkei", "img": "modules/cyberpunk-5e/assets/macro_icons/reload-gun-barrel.svg", "command": "const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\n\nlet ammoData = {\n  \"bullets\": {\n    \"type\": \"consumable\",\n    \"system\": {\n      \"description\": {\"value\":\"<p>Standard ammunition used for guns of all varieties.</p>\"},\n      \"consumableType\": \"ammo\",\n      \"rarity\": \"common\"\n    },\n    \"img\":\"modules/cyberpunk-5e/assets/macro_icons/bullets.svg\", \n  },\n  \"shells\": {\n    \"type\": \"consumable\",\n    \"system\": {\n      \"description\": {\"value\":\"<p>Standard ammunition used for shotguns.</p>\"},\n      \"consumableType\": \"ammo\",\n      \"rarity\": \"common\"\n    },\n    \"img\": \"modules/cyberpunk-5e/assets/macro_icons/shotgun-rounds.svg\"\n  }\n}\n\nasync function getWeaponsToReload(actor) {\n  weapons = actor.items.filter(i => i.type === \"weapon\" && i.system.equipped && i.system.properties.rel && i.system.consume.type === \"ammo\");\n  weaponCapacities = []\n  weapons.forEach(w => {\n    if (!w.system.consume.target) {\n      weaponCapacities.push({\"id\": w.id, \"name\": w.name, \"ammo\": 0, \"capacity\": w.flags.cyberpunk5e.reload});\n      return;\n    }\n    ammo = actor.items.find(i => i.id === w.system.consume.target);\n    if (!ammo) {\n      weaponCapacities.push({\"id\": w.id, \"name\": w.name, \"ammo\": 0, \"capacity\": w.flags.cyberpunk5e.reload});\n    } else {\n      weaponCapacities.push({\"id\": w.id, \"name\": w.name, \"ammo\": ammo.system.quantity, \"capacity\": w.flags.cyberpunk5e.reload});\n    }\n  });\n  return weaponCapacities.filter(wc => {\n    return wc.ammo < wc.capacity;\n  });\n}\n\nasync function reloadButton(html, game, token) {\n  let selectedWeaponId = html.find(\"[id=weapons]\")[0].value;\n  if (!selectedWeaponId) {\n    console.log(\"No weapon selected!\")\n    return;\n  }\n  selectedWeapon = token.actor.items.find(i => i.id === selectedWeaponId)\n  if (!selectedWeapon) {\n    console.error(\"Could not find weapon with selected token!\")\n    return;\n  }\n  // If no ammo target exists, create it.\n  targetAmmoId = selectedWeapon.system.consume.target;\n  targetAmmo = targetAmmoId ? token.actor.items.find(i => i.id === targetAmmoId) : null;\n  if (!targetAmmo) {\n    targetAmmo = await createAmmo(token.actor, selectedWeapon)\n    if (!targetAmmo) return null;\n    await selectedWeapon.update({\"system.consume.target\": targetAmmo.id})\n  } else {\n    weaponStats = selectedWeapon.flags.cyberpunk5e;\n    if (!weaponStats) return;\n    await targetAmmo.update({\"system.quantity\": weaponStats.reload})\n  }\n\n  // Output the reload to chat.\n  let content_html = `${token.actor.name} has reloaded ${selectedWeapon.name}!`;\n  ChatMessage.create({content: content_html})\n}\n\nasync function createAmmo(actor, weapon) {\n  weaponStats = weapon.flags.cyberpunk5e\n  if (!weaponStats) return null;\n  ammoType = weaponStats.ammo_type\n  ammoName = ammoType[0].toUpperCase() + ammoType.slice(1)\n  ammoItem = ammoData[ammoType]\n  ammoItem.name = ammoName.concat(\" (\" + weapon.name + \")\")\n  ammoItem.system.quantity = weaponStats.reload\n  console.log(ammoItem)\n  items = await actor.createEmbeddedDocuments('Item', [ammoItem])\n  return items[0]\n}\n\nvar weapons = await getWeaponsToReload(token.actor)\nconsole.log(weapons)\n\nif (weapons.length > 0) {\n  let weaponOptions = weapons.map(w => \n    `<option value=${w.id}>${w.name} (${w.ammo})</option>`\n  ).reduce((r,opt) => r.concat(opt), '<option disabled value selected />')\n\n  let weaponSelector = `\n  <div>\n  <label>Select weapon:</label>\n  <select id=\"weapons\" name=\"weapons\">${weaponOptions}</select>\n  </div>`\n\n  let dialogHtml = '<div>' + weaponSelector + '</div>';\n\n\n  let d = new Dialog({\n    title: \"Reload\",\n    content: dialogHtml,\n    buttons: {\n      advantage: {\n        label: \"Reload\",\n        callback: (html) => reloadButton(html, game, token)\n      }\n    }\n  })\n  d.render(true)\n}", "folder": "FbesQl3QYJtr2mb9", "sort": 200000, "_id": "ytNMnALEf7qZh0od", "ownership": {"default": 0, "35XmDJHnBMPCEkei": 3}, "flags": {}, "_stats": {"systemId": "dnd5e", "systemVersion": "2.0.3", "coreVersion": "10.288", "createdTime": 1665463222565, "modifiedTime": 1667116439090, "lastModifiedBy": "35XmDJHnBMPCEkei"}}
{"folder": "FbesQl3QYJtr2mb9", "name": "Modify Weapon", "type": "script", "author": "35XmDJHnBMPCEkei", "img": "modules/cyberpunk-5e/assets/macro_icons/tinker.svg", "scope": "global", "command": "", "sort": 0, "_id": "t8NufKt9xNPScbgL", "ownership": {"default": 0, "35XmDJHnBMPCEkei": 3}, "flags": {}, "_stats": {"systemId": "dnd5e", "systemVersion": "2.0.3", "coreVersion": "10.288", "createdTime": 1667782121600, "modifiedTime": 1667782121600, "lastModifiedBy": "35XmDJHnBMPCEkei"}}
{"name": "Tool Check", "type": "script", "author": "35XmDJHnBMPCEkei", "img": "modules/cyberpunk-5e/assets/macro_icons/gear-hammer.svg", "scope": "global", "command": "const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\n\nasync function getToolNames(game, toolIds) {\n  let itemPack = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS);\n  let vehicles = CONFIG.DND5E.vehicleTypes;\n\n  let names = []\n  for (const [key, id] of Object.entries(toolIds)) {\n    if (vehicles[id]) {\n      names.push(vehicles[id]);\n      continue;\n    }\n    let itemId = CONFIG.DND5E.toolIds[id];\n    const itemDoc = await itemPack.getDocument(itemId);\n    if (itemDoc) {\n      names.push(itemDoc.name);\n    }\n  }\n  return names\n}\n\nasync function rollToolButton(html, adv, token) {\n  let selectedAbility = html.find(\"[id=ability]\")[0].value;\n  let expertise = html.find(\"[name=expertise]\")[0].checked;\n  let tool = html.find(\"[id=tools]\")[0].value;\n  switch(adv) {\n    case 'adv':\n      diceRoll = \"2d20kh1\";\n      break;\n    case 'disadv':\n      diceRoll = \"2d20kl1\";\n      break;\n    default:\n      diceRoll = \"1d20\";\n      break;\n  }\n  if (tool) {\n    rollToolCheck(token.actor, tool.replaceAll('-',' '), diceRoll, selectedAbility, expertise)\n  }\n}\n\nasync function rollToolCheck(actor, tool, diceRoll, ability, expertise) {\n  let actorData = actor.system\n  let mod = actorData.abilities[ability].mod;\n\n  let proficiency = expertise ? actorData.attributes.prof * 2 : actorData.attributes.prof;\n\n  let roll = await new Roll(`${diceRoll}+${proficiency}+${mod}`).roll();\n\n  // Imitate dice tooltip\n  console.log(roll.dice[0])\n  let result = 0;\n  let diceRollParts = roll.dice[0].results.map(d => {\n    if (d.active) {\n      result = d.result;\n    }\n    let maxmin = \"\"\n    if (d.result === 20) {\n      maxmin = \"max\"\n    } else if (d.result === 1) {\n      maxmin = \"min\"\n    }\n    return `<li class=\"roll die d20 ${d.discarded ? 'discarded': ''} ${maxmin}\">${d.result}</li>`\n  }).reduce((r, li) => r.concat(li), '')\n\n  let critfumble = \"\"\n  if (result === 20) {\n    critfumble = \"critical\";\n  } else if (result === 1) {\n    critfumble = \"fumble\";\n  }\n\n\n  let contentHtml = `\n    <header class=\"card-header flexrow\"><h3>${tool} [${ability.toUpperCase()}]${expertise ? ' (expertise)' : ''}</h3></header>\n    <div class=\"card-buttons\">\n      <div class=\"flexrow 1\">\n        <div class=\"dice-roll\">\n          <div class=\"dice-result\">\n            <div class=\"dice-formula\">${roll.formula}</div>\n            <div class=\"dice-tooltip\" style=\"display: none\">\n              <section class=\"tooltip-part\">\n                <div class=\"dice\">\n                  <ol class=\"dice-rolls\">${diceRollParts}</ol>\n                </div>\n              </section>\n            </div>\n            <h4 class=\"dice-total ${critfumble}\">${roll.total}</div>\n          </div>\n        </div>\n      </div>\n    </div>`\n\n  ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: actor}),\n    content: contentHtml\n  })\n}\n\nvar toolProf = token.actor.system.traits.toolProf;\nlet tools = await getToolNames(game, toolProf.value);\n\nif (toolProf.custom) {\n  tools = tools.concat(toolProf.custom.split(';'));\n}\n\nlet abilityScoreSelector = `\n<div>\n  <label>Select ability score:</label>\n  <select id=\"ability\" name=\"ability\">\n    <option value=\"str\">Strength</option>\n    <option value=\"dex\">Dexterity</option>\n    <option value=\"con\">Constitution</option>\n    <option value=\"int\" selected>Intelligence</option>\n    <option value=\"wis\">Wisdom</option>\n    <option value=\"cha\">Charisma</option>\n  </select>\n</div>\n`\n\nlet toolOptions = tools.map(tool => \n  `<option value=${tool.replaceAll(' ','-')}>${tool}</option>`\n).reduce((r,opt) => r.concat(opt), '<option disabled value selected />')\n\nlet toolSelector = `\n<div>\n<label>Select tool:</label>\n<select id=\"tools\" name=\"tools\">${toolOptions}</select>\n</div>`\n\nlet expertiseSelector = `\n<div><label>Expertise?</label><input name=\"expertise\" type=\"checkbox\"/></div>\n`\n\nlet dialogHtml = '<div>' + abilityScoreSelector.concat(toolSelector) + '</div>'.concat(expertiseSelector);\n\n\nlet d = new Dialog({\n  title: \"Tool Check\",\n  content: dialogHtml,\n  buttons: {\n    advantage: {\n      label: \"Advantage\",\n      callback: (html) => rollToolButton(html, \"adv\", token)\n    },\n    normal: {\n      label: \"Normal\",\n      callback: (html) => rollToolButton(html, \"norm\", token)\n    },\n    disadvantage: {\n      label: \"Disadvantage\",\n      callback: (html) => rollToolButton(html, \"disadv\", token)\n    },\n  }\n})\nd.render(true)", "folder": "FbesQl3QYJtr2mb9", "sort": 100000, "_id": "LoqkQZ5W6U5x8mZK", "ownership": {"default": 0, "kP09MjF5zDygPc2j": 3, "35XmDJHnBMPCEkei": 3}, "flags": {"core": {"sourceId": "Compendium.cyberpunk-5e.cyberpunk-macros-custom.ziJD47iwx3Yo7BKn"}}, "_stats": {"systemId": "dnd5e", "systemVersion": "2.0.3", "coreVersion": "10.288", "createdTime": 1665462898401, "modifiedTime": 1667116485705, "lastModifiedBy": "35XmDJHnBMPCEkei"}}
